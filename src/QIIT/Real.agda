module QIIT.Real where

open import VSet.Prelude hiding (lower)
import Cubical.Data.Nat as ‚Ñï
open import Cubical.Data.Nat.Order using () renaming (_‚â§_ to _‚â§·¥∫_)
open import Cubical.Data.Nat using (‚Ñï)
import Cubical.Data.Int as ‚Ñ§
open import Cubical.Data.Int using (‚Ñ§)
import Cubical.Data.NatPlusOne as ‚Ñï‚Çä‚ÇÅ
open import Cubical.Data.NatPlusOne using (‚Ñï‚Çä‚ÇÅ; 1+_; _¬∑‚Çä‚ÇÅ_)
import Cubical.Data.Rationals as ‚Ñö
open import Cubical.Data.Rationals using (‚Ñö; [_/_])
open import Cubical.Data.Rationals.Order
  using () renaming (_‚â§_ to _‚â§Íü¥_; _<_ to _<Íü¥_; ‚â§Dec to ‚â§DecÍü¥)
import Cubical.Data.Bool as ùîπ
open import Cubical.Data.Bool
  using (true; false; if_then_else_) renaming (Bool to ùîπ)

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level

isSurjective : {A : Type ‚Ñì} {B : Type ‚Ñì'} ‚Üí (f : A ‚Üí B) ‚Üí Type _
isSurjective {A = A} {B} f = (b : B) ‚Üí Œ£[ a ‚àà A ] f a ‚â° b

isMonotonic‚Ñö‚ÜíType : (f : ‚Ñö ‚Üí Type ‚Ñì) ‚Üí Type _
isMonotonic‚Ñö‚ÜíType f = ‚àÄ x y ‚Üí x ‚â§Íü¥ y ‚Üí f x ‚Üí f y

isMonotonic‚Ñï‚Üí‚Ñö : (f : ‚Ñï ‚Üí ‚Ñö) ‚Üí Type _
isMonotonic‚Ñï‚Üí‚Ñö f = ‚àÄ (x y : ‚Ñï) ‚Üí x ‚â§·¥∫ y ‚Üí f x ‚â§Íü¥ f y

isBounded : (f : ‚Ñö ‚Üí Type ‚Ñì) ‚Üí Type _
isBounded f = (Œ£[ x ‚àà ‚Ñö ] ¬¨ f x) √ó (Œ£[ x ‚àà ‚Ñö ] f x)

record ‚Ñù : Type (‚Ñì-suc ‚Ñì) where
  field
    Fun : ‚Ñö ‚Üí Type ‚Ñì
    dec : (x : ‚Ñö) ‚Üí Dec (Fun x)
    bounded : isBounded Fun
    monotonic : isMonotonic‚Ñö‚ÜíType Fun

open ‚Ñù

sign : ‚Ñï ‚Üí ‚Ñ§
sign n = if ‚Ñï.isEven n then ‚Ñ§.pos 1 else ‚Ñ§.negsuc 0

‚Ñï‚Üí‚Ñï‚Çä‚ÇÅ : (n : ‚Ñï) ‚Üí n ‚â¢ 0 ‚Üí ‚Ñï‚Çä‚ÇÅ
‚Ñï‚Üí‚Ñï‚Çä‚ÇÅ ‚Ñï.zero 0‚â¢0 = absurd (0‚â¢0 refl) 
‚Ñï‚Üí‚Ñï‚Çä‚ÇÅ (‚Ñï.suc n) _ = 1+ n
‚Ñï‚Üí‚Ñ§ : ‚Ñï ‚Üí ‚Ñ§
‚Ñï‚Üí‚Ñ§ = ‚Ñ§.pos
‚Ñ§‚Üí‚Ñö : ‚Ñ§ ‚Üí ‚Ñö
‚Ñ§‚Üí‚Ñö x = [ x / 1+ 0 ]
‚Ñï‚Üí‚Ñö : ‚Ñï ‚Üí ‚Ñö
‚Ñï‚Üí‚Ñö = ‚Ñ§‚Üí‚Ñö ‚àò ‚Ñï‚Üí‚Ñ§

‚ÑöSeries : ((n : ‚Ñï) ‚Üí ‚Ñö) ‚Üí (m : ‚Ñï) ‚Üí ‚Ñö
‚ÑöSeries f ‚Ñï.zero = ‚Ñï‚Üí‚Ñö 0
‚ÑöSeries f (‚Ñï.suc m) = f m ‚Ñö.+ ‚ÑöSeries f m

œÄGregoryLeibnizTerm : (n : ‚Ñï) ‚Üí ‚Ñö
œÄGregoryLeibnizTerm n = [ sign n / 1+ (2 ‚Ñï.¬∑ n) ]

œÄGregoryLeibniz = ‚ÑöSeries œÄGregoryLeibnizTerm 

module NilakanthaPi where

  term : ‚Ñï ‚Üí ‚Ñö
  term ‚Ñï.zero = ‚Ñï‚Üí‚Ñö 3
  term (‚Ñï.suc n) = [ num / denom ]
    where
      num : ‚Ñ§
      num = ‚Ñï‚Üí‚Ñ§ 4 ‚Ñ§.¬∑ sign n
      denom : ‚Ñï‚Çä‚ÇÅ
      denom = (1+ (2 ‚Ñï.¬∑ n ‚Ñï.+ 1) ¬∑‚Çä‚ÇÅ 1+ (2 ‚Ñï.¬∑ n ‚Ñï.+ 2) ¬∑‚Çä‚ÇÅ 1+ (2 ‚Ñï.¬∑ n ‚Ñï.+ 3))

  series = ‚ÑöSeries term
  upper : ‚Ñï ‚Üí ‚Ñö
  upper n = series (2 ‚Ñï.¬∑ n ‚Ñï.+ 1)
  lower : ‚Ñï ‚Üí ‚Ñö
  lower n = series (2 ‚Ñï.¬∑ n)

  upperIsMonatonic‚Ñö : {!!}

  Covering : (x : ‚Ñö) ‚Üí (Œ£[ n ‚àà ‚Ñï ] x ‚â§Íü¥ lower n) ‚äé (Œ£[ n ‚àà ‚Ñï ] upper n ‚â§Íü¥ x)
  Covering x = {!!}

  MutuallyExclusive
    : (x : ‚Ñö)
    ‚Üí (Œ£[ n ‚àà ‚Ñï ] x ‚â§Íü¥ lower n)
    ‚Üí (Œ£[ n ‚àà ‚Ñï ] upper n ‚â§Íü¥ x)
    ‚Üí ‚ä•
  MutuallyExclusive x (n1 , x‚â§lower) (n2 , x‚â•upper) = {!!}

  F : ‚Ñö ‚Üí Type _
  F x = Œ£[ n ‚àà ‚Ñï ] upper n ‚â§Íü¥ x

  œÄ : ‚Ñù
  œÄ .Fun = F
  œÄ .dec x = {!!}
  œÄ .bounded = (‚Ñï‚Üí‚Ñö 0 , ¬¨F0) , (‚Ñï‚Üí‚Ñö 4 , F4)
    where
      ¬¨F0 : ¬¨ F (‚Ñï‚Üí‚Ñö 0)
      ¬¨F0 (n , 0‚â§n) = {!!}
      F4 : F (‚Ñï‚Üí‚Ñö 4)
      F4 = 0 , ({!!} , {!!})
  œÄ .monotonic = {!!}
